name: Terraform Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure SSH Private Key (Linux/Mac)
        if: runner.os != 'Windows'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        shell: bash

      - name: Configure SSH Private Key (Windows)
        if: runner.os == 'Windows'
        run: |
          $sshDir = "$env:USERPROFILE\.ssh"
          New-Item -ItemType Directory -Force -Path $sshDir | Out-Null
          Set-Content -Path "$sshDir\id_rsa" -Value "${{ secrets.SSH_PRIVATE_KEY }}"
        shell: powershell


      - name: Create terraform.auto.tfvars (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cat <<EOF > terraform.auto.tfvars
          pm_api_url           = "${{ secrets.PM_API_URL }}"
          pm_api_token_id      = "${{ secrets.PM_API_TOKEN_ID }}"
          pm_api_token_secret  = "${{ secrets.PM_API_TOKEN_SECRET }}"
          target_node          = "${{ vars.TARGET_NODE }}"
          storage              = "${{ vars.STORAGE }}"
          clone_template       = "${{ vars.CLONE_TEMPLATE }}"
          gateway              = "${{ vars.GATEWAY }}"
          dns_primary          = "${{ vars.DNS_PRIMARY }}"
          dns_secondary        = "${{ vars.DNS_SECONDARY }}"
          ssh_keys             = ${{ secrets.SSH_KEYS }}
          EOF
        shell: bash

      - name: Create terraform.auto.tfvars (Windows)
        if: runner.os == 'Windows'
        run: |
          $tfvars = @"
          pm_api_url           = "${{ secrets.PM_API_URL }}"
          pm_api_token_id      = "${{ secrets.PM_API_TOKEN_ID }}"
          pm_api_token_secret  = "${{ secrets.PM_API_TOKEN_SECRET }}"
          target_node          = "${{ vars.TARGET_NODE }}"
          storage              = "${{ vars.STORAGE }}"
          clone_template       = "${{ vars.CLONE_TEMPLATE }}"
          gateway              = "${{ vars.GATEWAY }}"
          dns_primary          = "${{ vars.DNS_PRIMARY }}"
          dns_secondary        = "${{ vars.DNS_SECONDARY }}"
          ssh_keys             = ${{ secrets.SSH_KEYS }}
          "@
          Set-Content -Path terraform.auto.tfvars -Value $tfvars
        shell: powershell

      - name: Terraform Version
        run: terraform version

      - name: Terraform Init
        run: terraform init -reconfigure
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
